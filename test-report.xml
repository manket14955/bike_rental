<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite id="0" name="/projects/challenge/src/tests/SignUpForm.test.js" errors="0" package="/projects/challenge/src/tests/SignUpForm.test.js" hostname="localhost" tests="12" failures="4" time="2.973" timestamp="2020-07-12T18:34:15">
    <properties>
    </properties>
    <testcase classname="renders without crashing" name="renders without crashing" time="0">
    </testcase>
    <testcase classname="SignUpForm" name="should render six &lt;div /&gt;" time="0">
      <failure message="Error: expect(received).toEqual(expected)

Expected value to equal:
  8
Received:
  6
    at Object.it (/projects/challenge/src/tests/SignUpForm.test.js:22:40)
    at Object.asyncFn (/projects/challenge/node_modules/jest-jasmine2/build/jasmine-async.js:68:30)
    at resolve (/projects/challenge/node_modules/jest-jasmine2/build/queueRunner.js:38:12)
    at new Promise (&lt;anonymous&gt;)
    at mapper (/projects/challenge/node_modules/jest-jasmine2/build/queueRunner.js:31:21)
    at Promise.resolve.then.el (/projects/challenge/node_modules/p-map/index.js:46:16)
    at &lt;anonymous&gt;" type="AssertionError">
      </failure>
    </testcase>
    <testcase classname="SignUpForm" name="calls submit function when form is submitted" time="0">
    </testcase>
    <testcase classname="SignUpForm" name="should render one &lt;form&gt;" time="0">
    </testcase>
    <testcase classname="SignUpForm" name="should render four &lt;label&gt;s" time="0">
      <failure message="Error: expect(received).toHaveLength(length)

Expected value to have length:
  5
Received:
  {Symbol(enzyme.__root__): {Symbol(enzyme.__root__): [Circular], Symbol(enzyme.__unrendered__): &lt;SignUpForm /&gt;, Symbol(enzyme.__renderer__): {&quot;batchedUpdates&quot;: [Function batchedUpdates], &quot;checkPropTypes&quot;: [Function checkPropTypes], &quot;getNode&quot;: [Function getNode], &quot;render&quot;: [Function render], &quot;simulateError&quot;: [Function simulateError], &quot;simulateEvent&quot;: [Function simulateEvent], &quot;unmount&quot;: [Function unmount]}, Symbol(enzyme.__node__): {&quot;instance&quot;: null, &quot;key&quot;: undefined, &quot;nodeType&quot;: &quot;host&quot;, &quot;props&quot;: {&quot;children&quot;: [&lt;div className=&quot;FormTitle&quot;&gt;&lt;NavLink activeClassName=&quot;active&quot; aria-current=&quot;page&quot; className=&quot;FormTitle__Link&quot; to=&quot;/sign-in&quot;&gt;Login&lt;/NavLink&gt; or&lt;NavLink activeClassName=&quot;active&quot; aria-current=&quot;page&quot; className=&quot;FormTitle__Link&quot; exact={true} to=&quot;/&quot;&gt;Register&lt;/NavLink&gt;&lt;/div&gt;, &lt;form className=&quot;FormFields&quot; onSubmit={[Function bound handleSubmit]}&gt;&lt;div&gt;&lt;label&gt;First name&lt;/label&gt;&lt;input id=&quot;fname&quot; onChange={[Function bound handleChange]} type=&quot;text&quot; /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;label&gt;Last Name&lt;/label&gt;&lt;input id=&quot;lname&quot; onChange={[Function bound handleChange]} type=&quot;text&quot; /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;label&gt;Email&lt;/label&gt;&lt;input id=&quot;email&quot; onChange={[Function bound handleChange]} type=&quot;text&quot; /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div className=&quot;pwd&quot;&gt;&lt;label&gt;Password&lt;/label&gt;&lt;input id=&quot;password&quot; onChange={[Function bound handleChange]} type=&quot;text&quot; /&gt;&lt;br /&gt;&lt;/div&gt;&lt;span className=&quot;FormField__Checkbox&quot;&gt;Terms and Conditions&lt;/span&gt;&lt;button id=&quot;hasAgreed&quot; onChange={[Function bound handleChange]} type=&quot;checkbox&quot; /&gt;&lt;br /&gt;&lt;button disabled={true} onClick={[Function bound handleSubmit]} /&gt;&lt;br /&gt;&lt;/form&gt;], &quot;className&quot;: &quot;FormCenter&quot;}, &quot;ref&quot;: null, &quot;rendered&quot;: [{&quot;instance&quot;: null, &quot;key&quot;: undefined, &quot;nodeType&quot;: &quot;host&quot;, &quot;props&quot;: [Object], &quot;ref&quot;: null, &quot;rendered&quot;: [Array], &quot;type&quot;: &quot;div&quot;}, {&quot;instance&quot;: null, &quot;key&quot;: undefined, &quot;nodeType&quot;: &quot;host&quot;, &quot;props&quot;: [Object], &quot;ref&quot;: null, &quot;rendered&quot;: [Array], &quot;type&quot;: &quot;form&quot;}], &quot;type&quot;: &quot;div&quot;}, Symbol(enzyme.__nodes__): [{&quot;instance&quot;: null, &quot;key&quot;: undefined, &quot;nodeType&quot;: &quot;host&quot;, &quot;props&quot;: {&quot;children&quot;: [Array], &quot;className&quot;: &quot;FormCenter&quot;}, &quot;ref&quot;: null, &quot;rendered&quot;: [[Object], [Object]], &quot;type&quot;: &quot;div&quot;}], Symbol(enzyme.__options__): {&quot;adapter&quot;: {&quot;options&quot;: {&quot;enableComponentDidUpdateOnSetState&quot;: true, &quot;legacyContextMode&quot;: &quot;parent&quot;, &quot;lifecycles&quot;: [Object]}}, Symbol(enzyme.__providerValues__): undefined}, Symbol(enzyme.__providerValues__): Map {}, Symbol(enzyme.__childContext__): null}, Symbol(enzyme.__unrendered__): null, Symbol(enzyme.__renderer__): {&quot;batchedUpdates&quot;: [Function batchedUpdates], &quot;checkPropTypes&quot;: [Function checkPropTypes], &quot;getNode&quot;: [Function getNode], &quot;render&quot;: [Function render], &quot;simulateError&quot;: [Function simulateError], &quot;simulateEvent&quot;: [Function simulateEvent], &quot;unmount&quot;: [Function unmount]}, Symbol(enzyme.__node__): {&quot;instance&quot;: null, &quot;key&quot;: undefined, &quot;nodeType&quot;: &quot;host&quot;, &quot;props&quot;: {&quot;children&quot;: &quot;First name&quot;}, &quot;ref&quot;: null, &quot;rendered&quot;: &quot;First name&quot;, &quot;type&quot;: &quot;label&quot;}, Symbol(enzyme.__nodes__): [{&quot;instance&quot;: null, &quot;key&quot;: undefined, &quot;nodeType&quot;: &quot;host&quot;, &quot;props&quot;: {&quot;children&quot;: &quot;First name&quot;}, &quot;ref&quot;: null, &quot;rendered&quot;: &quot;First name&quot;, &quot;type&quot;: &quot;label&quot;}, {&quot;instance&quot;: null, &quot;key&quot;: undefined, &quot;nodeType&quot;: &quot;host&quot;, &quot;props&quot;: {&quot;children&quot;: &quot;Last Name&quot;}, &quot;ref&quot;: null, &quot;rendered&quot;: &quot;Last Name&quot;, &quot;type&quot;: &quot;label&quot;}, {&quot;instance&quot;: null, &quot;key&quot;: undefined, &quot;nodeType&quot;: &quot;host&quot;, &quot;props&quot;: {&quot;children&quot;: &quot;Email&quot;}, &quot;ref&quot;: null, &quot;rendered&quot;: &quot;Email&quot;, &quot;type&quot;: &quot;label&quot;}, {&quot;instance&quot;: null, &quot;key&quot;: undefined, &quot;nodeType&quot;: &quot;host&quot;, &quot;props&quot;: {&quot;children&quot;: &quot;Password&quot;}, &quot;ref&quot;: null, &quot;rendered&quot;: &quot;Password&quot;, &quot;type&quot;: &quot;label&quot;}], Symbol(enzyme.__options__): {&quot;adapter&quot;: {&quot;options&quot;: {&quot;enableComponentDidUpdateOnSetState&quot;: true, &quot;legacyContextMode&quot;: &quot;parent&quot;, &quot;lifecycles&quot;: {&quot;componentDidUpdate&quot;: [Object], &quot;getChildContext&quot;: [Object], &quot;getDerivedStateFromError&quot;: true, &quot;getDerivedStateFromProps&quot;: [Object], &quot;getSnapshotBeforeUpdate&quot;: true, &quot;setState&quot;: [Object]}}}, Symbol(enzyme.__providerValues__): undefined}, Symbol(enzyme.__rootNodes__): [{&quot;instance&quot;: null, &quot;key&quot;: undefined, &quot;nodeType&quot;: &quot;host&quot;, &quot;props&quot;: {&quot;children&quot;: [&lt;div className=&quot;FormTitle&quot;&gt;&lt;NavLink activeClassName=&quot;active&quot; aria-current=&quot;page&quot; className=&quot;FormTitle__Link&quot; to=&quot;/sign-in&quot;&gt;Login&lt;/NavLink&gt; or&lt;NavLink activeClassName=&quot;active&quot; aria-current=&quot;page&quot; className=&quot;FormTitle__Link&quot; exact={true} to=&quot;/&quot;&gt;Register&lt;/NavLink&gt;&lt;/div&gt;, &lt;form className=&quot;FormFields&quot; onSubmit={[Function bound handleSubmit]}&gt;&lt;div&gt;&lt;label&gt;First name&lt;/label&gt;&lt;input id=&quot;fname&quot; onChange={[Function bound handleChange]} type=&quot;text&quot; /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;label&gt;Last Name&lt;/label&gt;&lt;input id=&quot;lname&quot; onChange={[Function bound handleChange]} type=&quot;text&quot; /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;label&gt;Email&lt;/label&gt;&lt;input id=&quot;email&quot; onChange={[Function bound handleChange]} type=&quot;text&quot; /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div className=&quot;pwd&quot;&gt;&lt;label&gt;Password&lt;/label&gt;&lt;input id=&quot;password&quot; onChange={[Function bound handleChange]} type=&quot;text&quot; /&gt;&lt;br /&gt;&lt;/div&gt;&lt;span className=&quot;FormField__Checkbox&quot;&gt;Terms and Conditions&lt;/span&gt;&lt;button id=&quot;hasAgreed&quot; onChange={[Function bound handleChange]} type=&quot;checkbox&quot; /&gt;&lt;br /&gt;&lt;button disabled={true} onClick={[Function bound handleSubmit]} /&gt;&lt;br /&gt;&lt;/form&gt;], &quot;className&quot;: &quot;FormCenter&quot;}, &quot;ref&quot;: null, &quot;rendered&quot;: [{&quot;instance&quot;: null, &quot;key&quot;: undefined, &quot;nodeType&quot;: &quot;host&quot;, &quot;props&quot;: [Object], &quot;ref&quot;: null, &quot;rendered&quot;: [Array], &quot;type&quot;: &quot;div&quot;}, {&quot;instance&quot;: null, &quot;key&quot;: undefined, &quot;nodeType&quot;: &quot;host&quot;, &quot;props&quot;: [Object], &quot;ref&quot;: null, &quot;rendered&quot;: [Array], &quot;type&quot;: &quot;form&quot;}], &quot;type&quot;: &quot;div&quot;}], Symbol(enzyme.__providerValues__): null}
received.length:
  4
    at Object.it (/projects/challenge/src/tests/SignUpForm.test.js:37:35)
    at Object.asyncFn (/projects/challenge/node_modules/jest-jasmine2/build/jasmine-async.js:68:30)
    at resolve (/projects/challenge/node_modules/jest-jasmine2/build/queueRunner.js:38:12)
    at new Promise (&lt;anonymous&gt;)
    at mapper (/projects/challenge/node_modules/jest-jasmine2/build/queueRunner.js:31:21)
    at Promise.resolve.then.el (/projects/challenge/node_modules/p-map/index.js:46:16)
    at &lt;anonymous&gt;" type="AssertionError">
      </failure>
    </testcase>
    <testcase classname="SignUpForm" name="should render four &lt;input&gt;s" time="0">
      <failure message="Error: expect(received).toHaveLength(length)

Expected value to have length:
  5
Received:
  {Symbol(enzyme.__root__): {Symbol(enzyme.__root__): [Circular], Symbol(enzyme.__unrendered__): &lt;SignUpForm /&gt;, Symbol(enzyme.__renderer__): {&quot;batchedUpdates&quot;: [Function batchedUpdates], &quot;checkPropTypes&quot;: [Function checkPropTypes], &quot;getNode&quot;: [Function getNode], &quot;render&quot;: [Function render], &quot;simulateError&quot;: [Function simulateError], &quot;simulateEvent&quot;: [Function simulateEvent], &quot;unmount&quot;: [Function unmount]}, Symbol(enzyme.__node__): {&quot;instance&quot;: null, &quot;key&quot;: undefined, &quot;nodeType&quot;: &quot;host&quot;, &quot;props&quot;: {&quot;children&quot;: [&lt;div className=&quot;FormTitle&quot;&gt;&lt;NavLink activeClassName=&quot;active&quot; aria-current=&quot;page&quot; className=&quot;FormTitle__Link&quot; to=&quot;/sign-in&quot;&gt;Login&lt;/NavLink&gt; or&lt;NavLink activeClassName=&quot;active&quot; aria-current=&quot;page&quot; className=&quot;FormTitle__Link&quot; exact={true} to=&quot;/&quot;&gt;Register&lt;/NavLink&gt;&lt;/div&gt;, &lt;form className=&quot;FormFields&quot; onSubmit={[Function bound handleSubmit]}&gt;&lt;div&gt;&lt;label&gt;First name&lt;/label&gt;&lt;input id=&quot;fname&quot; onChange={[Function bound handleChange]} type=&quot;text&quot; /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;label&gt;Last Name&lt;/label&gt;&lt;input id=&quot;lname&quot; onChange={[Function bound handleChange]} type=&quot;text&quot; /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;label&gt;Email&lt;/label&gt;&lt;input id=&quot;email&quot; onChange={[Function bound handleChange]} type=&quot;text&quot; /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div className=&quot;pwd&quot;&gt;&lt;label&gt;Password&lt;/label&gt;&lt;input id=&quot;password&quot; onChange={[Function bound handleChange]} type=&quot;text&quot; /&gt;&lt;br /&gt;&lt;/div&gt;&lt;span className=&quot;FormField__Checkbox&quot;&gt;Terms and Conditions&lt;/span&gt;&lt;button id=&quot;hasAgreed&quot; onChange={[Function bound handleChange]} type=&quot;checkbox&quot; /&gt;&lt;br /&gt;&lt;button disabled={true} onClick={[Function bound handleSubmit]} /&gt;&lt;br /&gt;&lt;/form&gt;], &quot;className&quot;: &quot;FormCenter&quot;}, &quot;ref&quot;: null, &quot;rendered&quot;: [{&quot;instance&quot;: null, &quot;key&quot;: undefined, &quot;nodeType&quot;: &quot;host&quot;, &quot;props&quot;: [Object], &quot;ref&quot;: null, &quot;rendered&quot;: [Array], &quot;type&quot;: &quot;div&quot;}, {&quot;instance&quot;: null, &quot;key&quot;: undefined, &quot;nodeType&quot;: &quot;host&quot;, &quot;props&quot;: [Object], &quot;ref&quot;: null, &quot;rendered&quot;: [Array], &quot;type&quot;: &quot;form&quot;}], &quot;type&quot;: &quot;div&quot;}, Symbol(enzyme.__nodes__): [{&quot;instance&quot;: null, &quot;key&quot;: undefined, &quot;nodeType&quot;: &quot;host&quot;, &quot;props&quot;: {&quot;children&quot;: [Array], &quot;className&quot;: &quot;FormCenter&quot;}, &quot;ref&quot;: null, &quot;rendered&quot;: [[Object], [Object]], &quot;type&quot;: &quot;div&quot;}], Symbol(enzyme.__options__): {&quot;adapter&quot;: {&quot;options&quot;: {&quot;enableComponentDidUpdateOnSetState&quot;: true, &quot;legacyContextMode&quot;: &quot;parent&quot;, &quot;lifecycles&quot;: [Object]}}, Symbol(enzyme.__providerValues__): undefined}, Symbol(enzyme.__providerValues__): Map {}, Symbol(enzyme.__childContext__): null}, Symbol(enzyme.__unrendered__): null, Symbol(enzyme.__renderer__): {&quot;batchedUpdates&quot;: [Function batchedUpdates], &quot;checkPropTypes&quot;: [Function checkPropTypes], &quot;getNode&quot;: [Function getNode], &quot;render&quot;: [Function render], &quot;simulateError&quot;: [Function simulateError], &quot;simulateEvent&quot;: [Function simulateEvent], &quot;unmount&quot;: [Function unmount]}, Symbol(enzyme.__node__): {&quot;instance&quot;: null, &quot;key&quot;: undefined, &quot;nodeType&quot;: &quot;host&quot;, &quot;props&quot;: {&quot;id&quot;: &quot;fname&quot;, &quot;onChange&quot;: [Function bound handleChange], &quot;type&quot;: &quot;text&quot;}, &quot;ref&quot;: null, &quot;rendered&quot;: null, &quot;type&quot;: &quot;input&quot;}, Symbol(enzyme.__nodes__): [{&quot;instance&quot;: null, &quot;key&quot;: undefined, &quot;nodeType&quot;: &quot;host&quot;, &quot;props&quot;: {&quot;id&quot;: &quot;fname&quot;, &quot;onChange&quot;: [Function bound handleChange], &quot;type&quot;: &quot;text&quot;}, &quot;ref&quot;: null, &quot;rendered&quot;: null, &quot;type&quot;: &quot;input&quot;}, {&quot;instance&quot;: null, &quot;key&quot;: undefined, &quot;nodeType&quot;: &quot;host&quot;, &quot;props&quot;: {&quot;id&quot;: &quot;lname&quot;, &quot;onChange&quot;: [Function bound handleChange], &quot;type&quot;: &quot;text&quot;}, &quot;ref&quot;: null, &quot;rendered&quot;: null, &quot;type&quot;: &quot;input&quot;}, {&quot;instance&quot;: null, &quot;key&quot;: undefined, &quot;nodeType&quot;: &quot;host&quot;, &quot;props&quot;: {&quot;id&quot;: &quot;email&quot;, &quot;onChange&quot;: [Function bound handleChange], &quot;type&quot;: &quot;text&quot;}, &quot;ref&quot;: null, &quot;rendered&quot;: null, &quot;type&quot;: &quot;input&quot;}, {&quot;instance&quot;: null, &quot;key&quot;: undefined, &quot;nodeType&quot;: &quot;host&quot;, &quot;props&quot;: {&quot;id&quot;: &quot;password&quot;, &quot;onChange&quot;: [Function bound handleChange], &quot;type&quot;: &quot;text&quot;}, &quot;ref&quot;: null, &quot;rendered&quot;: null, &quot;type&quot;: &quot;input&quot;}], Symbol(enzyme.__options__): {&quot;adapter&quot;: {&quot;options&quot;: {&quot;enableComponentDidUpdateOnSetState&quot;: true, &quot;legacyContextMode&quot;: &quot;parent&quot;, &quot;lifecycles&quot;: {&quot;componentDidUpdate&quot;: [Object], &quot;getChildContext&quot;: [Object], &quot;getDerivedStateFromError&quot;: true, &quot;getDerivedStateFromProps&quot;: [Object], &quot;getSnapshotBeforeUpdate&quot;: true, &quot;setState&quot;: [Object]}}}, Symbol(enzyme.__providerValues__): undefined}, Symbol(enzyme.__rootNodes__): [{&quot;instance&quot;: null, &quot;key&quot;: undefined, &quot;nodeType&quot;: &quot;host&quot;, &quot;props&quot;: {&quot;children&quot;: [&lt;div className=&quot;FormTitle&quot;&gt;&lt;NavLink activeClassName=&quot;active&quot; aria-current=&quot;page&quot; className=&quot;FormTitle__Link&quot; to=&quot;/sign-in&quot;&gt;Login&lt;/NavLink&gt; or&lt;NavLink activeClassName=&quot;active&quot; aria-current=&quot;page&quot; className=&quot;FormTitle__Link&quot; exact={true} to=&quot;/&quot;&gt;Register&lt;/NavLink&gt;&lt;/div&gt;, &lt;form className=&quot;FormFields&quot; onSubmit={[Function bound handleSubmit]}&gt;&lt;div&gt;&lt;label&gt;First name&lt;/label&gt;&lt;input id=&quot;fname&quot; onChange={[Function bound handleChange]} type=&quot;text&quot; /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;label&gt;Last Name&lt;/label&gt;&lt;input id=&quot;lname&quot; onChange={[Function bound handleChange]} type=&quot;text&quot; /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;label&gt;Email&lt;/label&gt;&lt;input id=&quot;email&quot; onChange={[Function bound handleChange]} type=&quot;text&quot; /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div className=&quot;pwd&quot;&gt;&lt;label&gt;Password&lt;/label&gt;&lt;input id=&quot;password&quot; onChange={[Function bound handleChange]} type=&quot;text&quot; /&gt;&lt;br /&gt;&lt;/div&gt;&lt;span className=&quot;FormField__Checkbox&quot;&gt;Terms and Conditions&lt;/span&gt;&lt;button id=&quot;hasAgreed&quot; onChange={[Function bound handleChange]} type=&quot;checkbox&quot; /&gt;&lt;br /&gt;&lt;button disabled={true} onClick={[Function bound handleSubmit]} /&gt;&lt;br /&gt;&lt;/form&gt;], &quot;className&quot;: &quot;FormCenter&quot;}, &quot;ref&quot;: null, &quot;rendered&quot;: [{&quot;instance&quot;: null, &quot;key&quot;: undefined, &quot;nodeType&quot;: &quot;host&quot;, &quot;props&quot;: [Object], &quot;ref&quot;: null, &quot;rendered&quot;: [Array], &quot;type&quot;: &quot;div&quot;}, {&quot;instance&quot;: null, &quot;key&quot;: undefined, &quot;nodeType&quot;: &quot;host&quot;, &quot;props&quot;: [Object], &quot;ref&quot;: null, &quot;rendered&quot;: [Array], &quot;type&quot;: &quot;form&quot;}], &quot;type&quot;: &quot;div&quot;}], Symbol(enzyme.__providerValues__): null}
received.length:
  4
    at Object.it (/projects/challenge/src/tests/SignUpForm.test.js:40:35)
    at Object.asyncFn (/projects/challenge/node_modules/jest-jasmine2/build/jasmine-async.js:68:30)
    at resolve (/projects/challenge/node_modules/jest-jasmine2/build/queueRunner.js:38:12)
    at new Promise (&lt;anonymous&gt;)
    at mapper (/projects/challenge/node_modules/jest-jasmine2/build/queueRunner.js:31:21)
    at Promise.resolve.then.el (/projects/challenge/node_modules/p-map/index.js:46:16)
    at &lt;anonymous&gt;" type="AssertionError">
      </failure>
    </testcase>
    <testcase classname="SignUpForm" name="renders a fname input" time="0">
    </testcase>
    <testcase classname="SignUpForm" name="renders a lname input" time="0">
    </testcase>
    <testcase classname="SignUpForm" name="renders a email input" time="0">
    </testcase>
    <testcase classname="SignUpForm" name="renders a password input" time="0">
      <failure message="Error: expect(received).toEqual(expected)

Expected value to equal:
  1
Received:
  0
    at Object.it (/projects/challenge/src/tests/SignUpForm.test.js:52:184)
    at Object.asyncFn (/projects/challenge/node_modules/jest-jasmine2/build/jasmine-async.js:68:30)
    at resolve (/projects/challenge/node_modules/jest-jasmine2/build/queueRunner.js:38:12)
    at new Promise (&lt;anonymous&gt;)
    at mapper (/projects/challenge/node_modules/jest-jasmine2/build/queueRunner.js:31:21)
    at Promise.resolve.then.el (/projects/challenge/node_modules/p-map/index.js:46:16)
    at &lt;anonymous&gt;" type="AssertionError">
      </failure>
    </testcase>
    <testcase classname="SignUpForm" name="renders a checkbox input" time="0">
    </testcase>
    <testcase classname="SignUpForm" name="valid path" time="0">
    </testcase>
    <system-out/>
    <system-err/>
  </testsuite>
  <testsuite id="1" name="/projects/challenge/src/tests/SignInForm.test.js" errors="0" package="/projects/challenge/src/tests/SignInForm.test.js" hostname="localhost" tests="10" failures="7" time="0.481" timestamp="2020-07-12T18:34:18">
    <properties>
    </properties>
    <testcase classname="renders without crashing" name="renders without crashing" time="0">
    </testcase>
    <testcase classname="SignInForm" name="should render six &lt;div /&gt;" time="0">
      <failure message="Error: expect(received).toEqual(expected)

Expected value to equal:
  5
Received:
  6
    at Object.it (/projects/challenge/src/tests/SignInForm.test.js:22:40)
    at Object.asyncFn (/projects/challenge/node_modules/jest-jasmine2/build/jasmine-async.js:68:30)
    at resolve (/projects/challenge/node_modules/jest-jasmine2/build/queueRunner.js:38:12)
    at new Promise (&lt;anonymous&gt;)
    at mapper (/projects/challenge/node_modules/jest-jasmine2/build/queueRunner.js:31:21)
    at Promise.resolve.then.el (/projects/challenge/node_modules/p-map/index.js:46:16)
    at &lt;anonymous&gt;" type="AssertionError">
      </failure>
    </testcase>
    <testcase classname="SignInForm" name="calls submit function when form is submitted" time="0">
    </testcase>
    <testcase classname="SignInForm" name="should render one &lt;form&gt;" time="0">
    </testcase>
    <testcase classname="SignInForm" name="should render four &lt;label&gt;s" time="0">
      <failure message="Error: expect(received).toHaveLength(length)

Expected value to have length:
  2
Received:
  {Symbol(enzyme.__root__): {Symbol(enzyme.__root__): [Circular], Symbol(enzyme.__unrendered__): &lt;SignInForm /&gt;, Symbol(enzyme.__renderer__): {&quot;batchedUpdates&quot;: [Function batchedUpdates], &quot;checkPropTypes&quot;: [Function checkPropTypes], &quot;getNode&quot;: [Function getNode], &quot;render&quot;: [Function render], &quot;simulateError&quot;: [Function simulateError], &quot;simulateEvent&quot;: [Function simulateEvent], &quot;unmount&quot;: [Function unmount]}, Symbol(enzyme.__node__): {&quot;instance&quot;: null, &quot;key&quot;: undefined, &quot;nodeType&quot;: &quot;host&quot;, &quot;props&quot;: {&quot;children&quot;: [&lt;div className=&quot;FormTitle&quot;&gt;&lt;NavLink activeClassName=&quot;active&quot; aria-current=&quot;page&quot; className=&quot;FormTitle__Link&quot; to=&quot;/sign-in&quot;&gt;Login&lt;/NavLink&gt; or&lt;NavLink activeClassName=&quot;active&quot; aria-current=&quot;page&quot; className=&quot;FormTitle__Link&quot; exact={true} to=&quot;/&quot;&gt;Register&lt;/NavLink&gt;&lt;/div&gt;, &lt;form className=&quot;FormFields&quot; onSubmit={[Function bound handleSubmit]}&gt;&lt;div&gt;&lt;label&gt;First name&lt;/label&gt;&lt;input name=&quot;fname&quot; type=&quot;text&quot; /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;label&gt;Email&lt;/label&gt;&lt;input name=&quot;email&quot; onChange={[Function bound handleChange]} type=&quot;text&quot; /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div className=&quot;pwd&quot;&gt;&lt;label&gt;Password&lt;/label&gt;&lt;input name=&quot;password&quot; onChange={[Function bound handleChange]} type=&quot;text&quot; /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;label&gt;Submit&lt;/label&gt;&lt;button disabled={true} onClick={[Function bound handleSubmit]} /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/form&gt;], &quot;className&quot;: &quot;FormCenter&quot;}, &quot;ref&quot;: null, &quot;rendered&quot;: [{&quot;instance&quot;: null, &quot;key&quot;: undefined, &quot;nodeType&quot;: &quot;host&quot;, &quot;props&quot;: [Object], &quot;ref&quot;: null, &quot;rendered&quot;: [Array], &quot;type&quot;: &quot;div&quot;}, {&quot;instance&quot;: null, &quot;key&quot;: undefined, &quot;nodeType&quot;: &quot;host&quot;, &quot;props&quot;: [Object], &quot;ref&quot;: null, &quot;rendered&quot;: [Array], &quot;type&quot;: &quot;form&quot;}], &quot;type&quot;: &quot;div&quot;}, Symbol(enzyme.__nodes__): [{&quot;instance&quot;: null, &quot;key&quot;: undefined, &quot;nodeType&quot;: &quot;host&quot;, &quot;props&quot;: {&quot;children&quot;: [Array], &quot;className&quot;: &quot;FormCenter&quot;}, &quot;ref&quot;: null, &quot;rendered&quot;: [[Object], [Object]], &quot;type&quot;: &quot;div&quot;}], Symbol(enzyme.__options__): {&quot;adapter&quot;: {&quot;options&quot;: {&quot;enableComponentDidUpdateOnSetState&quot;: true, &quot;legacyContextMode&quot;: &quot;parent&quot;, &quot;lifecycles&quot;: [Object]}}, Symbol(enzyme.__providerValues__): undefined}, Symbol(enzyme.__providerValues__): Map {}, Symbol(enzyme.__childContext__): null}, Symbol(enzyme.__unrendered__): null, Symbol(enzyme.__renderer__): {&quot;batchedUpdates&quot;: [Function batchedUpdates], &quot;checkPropTypes&quot;: [Function checkPropTypes], &quot;getNode&quot;: [Function getNode], &quot;render&quot;: [Function render], &quot;simulateError&quot;: [Function simulateError], &quot;simulateEvent&quot;: [Function simulateEvent], &quot;unmount&quot;: [Function unmount]}, Symbol(enzyme.__node__): {&quot;instance&quot;: null, &quot;key&quot;: undefined, &quot;nodeType&quot;: &quot;host&quot;, &quot;props&quot;: {&quot;children&quot;: &quot;First name&quot;}, &quot;ref&quot;: null, &quot;rendered&quot;: &quot;First name&quot;, &quot;type&quot;: &quot;label&quot;}, Symbol(enzyme.__nodes__): [{&quot;instance&quot;: null, &quot;key&quot;: undefined, &quot;nodeType&quot;: &quot;host&quot;, &quot;props&quot;: {&quot;children&quot;: &quot;First name&quot;}, &quot;ref&quot;: null, &quot;rendered&quot;: &quot;First name&quot;, &quot;type&quot;: &quot;label&quot;}, {&quot;instance&quot;: null, &quot;key&quot;: undefined, &quot;nodeType&quot;: &quot;host&quot;, &quot;props&quot;: {&quot;children&quot;: &quot;Email&quot;}, &quot;ref&quot;: null, &quot;rendered&quot;: &quot;Email&quot;, &quot;type&quot;: &quot;label&quot;}, {&quot;instance&quot;: null, &quot;key&quot;: undefined, &quot;nodeType&quot;: &quot;host&quot;, &quot;props&quot;: {&quot;children&quot;: &quot;Password&quot;}, &quot;ref&quot;: null, &quot;rendered&quot;: &quot;Password&quot;, &quot;type&quot;: &quot;label&quot;}, {&quot;instance&quot;: null, &quot;key&quot;: undefined, &quot;nodeType&quot;: &quot;host&quot;, &quot;props&quot;: {&quot;children&quot;: &quot;Submit&quot;}, &quot;ref&quot;: null, &quot;rendered&quot;: &quot;Submit&quot;, &quot;type&quot;: &quot;label&quot;}], Symbol(enzyme.__options__): {&quot;adapter&quot;: {&quot;options&quot;: {&quot;enableComponentDidUpdateOnSetState&quot;: true, &quot;legacyContextMode&quot;: &quot;parent&quot;, &quot;lifecycles&quot;: {&quot;componentDidUpdate&quot;: [Object], &quot;getChildContext&quot;: [Object], &quot;getDerivedStateFromError&quot;: true, &quot;getDerivedStateFromProps&quot;: [Object], &quot;getSnapshotBeforeUpdate&quot;: true, &quot;setState&quot;: [Object]}}}, Symbol(enzyme.__providerValues__): undefined}, Symbol(enzyme.__rootNodes__): [{&quot;instance&quot;: null, &quot;key&quot;: undefined, &quot;nodeType&quot;: &quot;host&quot;, &quot;props&quot;: {&quot;children&quot;: [&lt;div className=&quot;FormTitle&quot;&gt;&lt;NavLink activeClassName=&quot;active&quot; aria-current=&quot;page&quot; className=&quot;FormTitle__Link&quot; to=&quot;/sign-in&quot;&gt;Login&lt;/NavLink&gt; or&lt;NavLink activeClassName=&quot;active&quot; aria-current=&quot;page&quot; className=&quot;FormTitle__Link&quot; exact={true} to=&quot;/&quot;&gt;Register&lt;/NavLink&gt;&lt;/div&gt;, &lt;form className=&quot;FormFields&quot; onSubmit={[Function bound handleSubmit]}&gt;&lt;div&gt;&lt;label&gt;First name&lt;/label&gt;&lt;input name=&quot;fname&quot; type=&quot;text&quot; /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;label&gt;Email&lt;/label&gt;&lt;input name=&quot;email&quot; onChange={[Function bound handleChange]} type=&quot;text&quot; /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div className=&quot;pwd&quot;&gt;&lt;label&gt;Password&lt;/label&gt;&lt;input name=&quot;password&quot; onChange={[Function bound handleChange]} type=&quot;text&quot; /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;label&gt;Submit&lt;/label&gt;&lt;button disabled={true} onClick={[Function bound handleSubmit]} /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/form&gt;], &quot;className&quot;: &quot;FormCenter&quot;}, &quot;ref&quot;: null, &quot;rendered&quot;: [{&quot;instance&quot;: null, &quot;key&quot;: undefined, &quot;nodeType&quot;: &quot;host&quot;, &quot;props&quot;: [Object], &quot;ref&quot;: null, &quot;rendered&quot;: [Array], &quot;type&quot;: &quot;div&quot;}, {&quot;instance&quot;: null, &quot;key&quot;: undefined, &quot;nodeType&quot;: &quot;host&quot;, &quot;props&quot;: [Object], &quot;ref&quot;: null, &quot;rendered&quot;: [Array], &quot;type&quot;: &quot;form&quot;}], &quot;type&quot;: &quot;div&quot;}], Symbol(enzyme.__providerValues__): null}
received.length:
  4
    at Object.it (/projects/challenge/src/tests/SignInForm.test.js:37:35)
    at Object.asyncFn (/projects/challenge/node_modules/jest-jasmine2/build/jasmine-async.js:68:30)
    at resolve (/projects/challenge/node_modules/jest-jasmine2/build/queueRunner.js:38:12)
    at new Promise (&lt;anonymous&gt;)
    at mapper (/projects/challenge/node_modules/jest-jasmine2/build/queueRunner.js:31:21)
    at Promise.resolve.then.el (/projects/challenge/node_modules/p-map/index.js:46:16)
    at &lt;anonymous&gt;" type="AssertionError">
      </failure>
    </testcase>
    <testcase classname="SignInForm" name="should render four &lt;input&gt;s" time="0">
      <failure message="Error: expect(received).toHaveLength(length)

Expected value to have length:
  2
Received:
  {Symbol(enzyme.__root__): {Symbol(enzyme.__root__): [Circular], Symbol(enzyme.__unrendered__): &lt;SignInForm /&gt;, Symbol(enzyme.__renderer__): {&quot;batchedUpdates&quot;: [Function batchedUpdates], &quot;checkPropTypes&quot;: [Function checkPropTypes], &quot;getNode&quot;: [Function getNode], &quot;render&quot;: [Function render], &quot;simulateError&quot;: [Function simulateError], &quot;simulateEvent&quot;: [Function simulateEvent], &quot;unmount&quot;: [Function unmount]}, Symbol(enzyme.__node__): {&quot;instance&quot;: null, &quot;key&quot;: undefined, &quot;nodeType&quot;: &quot;host&quot;, &quot;props&quot;: {&quot;children&quot;: [&lt;div className=&quot;FormTitle&quot;&gt;&lt;NavLink activeClassName=&quot;active&quot; aria-current=&quot;page&quot; className=&quot;FormTitle__Link&quot; to=&quot;/sign-in&quot;&gt;Login&lt;/NavLink&gt; or&lt;NavLink activeClassName=&quot;active&quot; aria-current=&quot;page&quot; className=&quot;FormTitle__Link&quot; exact={true} to=&quot;/&quot;&gt;Register&lt;/NavLink&gt;&lt;/div&gt;, &lt;form className=&quot;FormFields&quot; onSubmit={[Function bound handleSubmit]}&gt;&lt;div&gt;&lt;label&gt;First name&lt;/label&gt;&lt;input name=&quot;fname&quot; type=&quot;text&quot; /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;label&gt;Email&lt;/label&gt;&lt;input name=&quot;email&quot; onChange={[Function bound handleChange]} type=&quot;text&quot; /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div className=&quot;pwd&quot;&gt;&lt;label&gt;Password&lt;/label&gt;&lt;input name=&quot;password&quot; onChange={[Function bound handleChange]} type=&quot;text&quot; /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;label&gt;Submit&lt;/label&gt;&lt;button disabled={true} onClick={[Function bound handleSubmit]} /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/form&gt;], &quot;className&quot;: &quot;FormCenter&quot;}, &quot;ref&quot;: null, &quot;rendered&quot;: [{&quot;instance&quot;: null, &quot;key&quot;: undefined, &quot;nodeType&quot;: &quot;host&quot;, &quot;props&quot;: [Object], &quot;ref&quot;: null, &quot;rendered&quot;: [Array], &quot;type&quot;: &quot;div&quot;}, {&quot;instance&quot;: null, &quot;key&quot;: undefined, &quot;nodeType&quot;: &quot;host&quot;, &quot;props&quot;: [Object], &quot;ref&quot;: null, &quot;rendered&quot;: [Array], &quot;type&quot;: &quot;form&quot;}], &quot;type&quot;: &quot;div&quot;}, Symbol(enzyme.__nodes__): [{&quot;instance&quot;: null, &quot;key&quot;: undefined, &quot;nodeType&quot;: &quot;host&quot;, &quot;props&quot;: {&quot;children&quot;: [Array], &quot;className&quot;: &quot;FormCenter&quot;}, &quot;ref&quot;: null, &quot;rendered&quot;: [[Object], [Object]], &quot;type&quot;: &quot;div&quot;}], Symbol(enzyme.__options__): {&quot;adapter&quot;: {&quot;options&quot;: {&quot;enableComponentDidUpdateOnSetState&quot;: true, &quot;legacyContextMode&quot;: &quot;parent&quot;, &quot;lifecycles&quot;: [Object]}}, Symbol(enzyme.__providerValues__): undefined}, Symbol(enzyme.__providerValues__): Map {}, Symbol(enzyme.__childContext__): null}, Symbol(enzyme.__unrendered__): null, Symbol(enzyme.__renderer__): {&quot;batchedUpdates&quot;: [Function batchedUpdates], &quot;checkPropTypes&quot;: [Function checkPropTypes], &quot;getNode&quot;: [Function getNode], &quot;render&quot;: [Function render], &quot;simulateError&quot;: [Function simulateError], &quot;simulateEvent&quot;: [Function simulateEvent], &quot;unmount&quot;: [Function unmount]}, Symbol(enzyme.__node__): {&quot;instance&quot;: null, &quot;key&quot;: undefined, &quot;nodeType&quot;: &quot;host&quot;, &quot;props&quot;: {&quot;name&quot;: &quot;fname&quot;, &quot;type&quot;: &quot;text&quot;}, &quot;ref&quot;: null, &quot;rendered&quot;: null, &quot;type&quot;: &quot;input&quot;}, Symbol(enzyme.__nodes__): [{&quot;instance&quot;: null, &quot;key&quot;: undefined, &quot;nodeType&quot;: &quot;host&quot;, &quot;props&quot;: {&quot;name&quot;: &quot;fname&quot;, &quot;type&quot;: &quot;text&quot;}, &quot;ref&quot;: null, &quot;rendered&quot;: null, &quot;type&quot;: &quot;input&quot;}, {&quot;instance&quot;: null, &quot;key&quot;: undefined, &quot;nodeType&quot;: &quot;host&quot;, &quot;props&quot;: {&quot;name&quot;: &quot;email&quot;, &quot;onChange&quot;: [Function bound handleChange], &quot;type&quot;: &quot;text&quot;}, &quot;ref&quot;: null, &quot;rendered&quot;: null, &quot;type&quot;: &quot;input&quot;}, {&quot;instance&quot;: null, &quot;key&quot;: undefined, &quot;nodeType&quot;: &quot;host&quot;, &quot;props&quot;: {&quot;name&quot;: &quot;password&quot;, &quot;onChange&quot;: [Function bound handleChange], &quot;type&quot;: &quot;text&quot;}, &quot;ref&quot;: null, &quot;rendered&quot;: null, &quot;type&quot;: &quot;input&quot;}], Symbol(enzyme.__options__): {&quot;adapter&quot;: {&quot;options&quot;: {&quot;enableComponentDidUpdateOnSetState&quot;: true, &quot;legacyContextMode&quot;: &quot;parent&quot;, &quot;lifecycles&quot;: {&quot;componentDidUpdate&quot;: [Object], &quot;getChildContext&quot;: [Object], &quot;getDerivedStateFromError&quot;: true, &quot;getDerivedStateFromProps&quot;: [Object], &quot;getSnapshotBeforeUpdate&quot;: true, &quot;setState&quot;: [Object]}}}, Symbol(enzyme.__providerValues__): undefined}, Symbol(enzyme.__rootNodes__): [{&quot;instance&quot;: null, &quot;key&quot;: undefined, &quot;nodeType&quot;: &quot;host&quot;, &quot;props&quot;: {&quot;children&quot;: [&lt;div className=&quot;FormTitle&quot;&gt;&lt;NavLink activeClassName=&quot;active&quot; aria-current=&quot;page&quot; className=&quot;FormTitle__Link&quot; to=&quot;/sign-in&quot;&gt;Login&lt;/NavLink&gt; or&lt;NavLink activeClassName=&quot;active&quot; aria-current=&quot;page&quot; className=&quot;FormTitle__Link&quot; exact={true} to=&quot;/&quot;&gt;Register&lt;/NavLink&gt;&lt;/div&gt;, &lt;form className=&quot;FormFields&quot; onSubmit={[Function bound handleSubmit]}&gt;&lt;div&gt;&lt;label&gt;First name&lt;/label&gt;&lt;input name=&quot;fname&quot; type=&quot;text&quot; /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;label&gt;Email&lt;/label&gt;&lt;input name=&quot;email&quot; onChange={[Function bound handleChange]} type=&quot;text&quot; /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div className=&quot;pwd&quot;&gt;&lt;label&gt;Password&lt;/label&gt;&lt;input name=&quot;password&quot; onChange={[Function bound handleChange]} type=&quot;text&quot; /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;label&gt;Submit&lt;/label&gt;&lt;button disabled={true} onClick={[Function bound handleSubmit]} /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/form&gt;], &quot;className&quot;: &quot;FormCenter&quot;}, &quot;ref&quot;: null, &quot;rendered&quot;: [{&quot;instance&quot;: null, &quot;key&quot;: undefined, &quot;nodeType&quot;: &quot;host&quot;, &quot;props&quot;: [Object], &quot;ref&quot;: null, &quot;rendered&quot;: [Array], &quot;type&quot;: &quot;div&quot;}, {&quot;instance&quot;: null, &quot;key&quot;: undefined, &quot;nodeType&quot;: &quot;host&quot;, &quot;props&quot;: [Object], &quot;ref&quot;: null, &quot;rendered&quot;: [Array], &quot;type&quot;: &quot;form&quot;}], &quot;type&quot;: &quot;div&quot;}], Symbol(enzyme.__providerValues__): null}
received.length:
  3
    at Object.it (/projects/challenge/src/tests/SignInForm.test.js:40:35)
    at Object.asyncFn (/projects/challenge/node_modules/jest-jasmine2/build/jasmine-async.js:68:30)
    at resolve (/projects/challenge/node_modules/jest-jasmine2/build/queueRunner.js:38:12)
    at new Promise (&lt;anonymous&gt;)
    at mapper (/projects/challenge/node_modules/jest-jasmine2/build/queueRunner.js:31:21)
    at Promise.resolve.then.el (/projects/challenge/node_modules/p-map/index.js:46:16)
    at &lt;anonymous&gt;" type="AssertionError">
      </failure>
    </testcase>
    <testcase classname="SignInForm" name="renders a fname input" time="0">
      <failure message="Error: expect(received).toEqual(expected)

Expected value to equal:
  1
Received:
  0
    at Object.it (/projects/challenge/src/tests/SignInForm.test.js:43:186)
    at Object.asyncFn (/projects/challenge/node_modules/jest-jasmine2/build/jasmine-async.js:68:30)
    at resolve (/projects/challenge/node_modules/jest-jasmine2/build/queueRunner.js:38:12)
    at new Promise (&lt;anonymous&gt;)
    at mapper (/projects/challenge/node_modules/jest-jasmine2/build/queueRunner.js:31:21)
    at Promise.resolve.then.el (/projects/challenge/node_modules/p-map/index.js:46:16)
    at &lt;anonymous&gt;" type="AssertionError">
      </failure>
    </testcase>
    <testcase classname="SignInForm" name="renders a lname input" time="0">
      <failure message="Error: expect(received).toEqual(expected)

Expected value to equal:
  1
Received:
  0
    at Object.it (/projects/challenge/src/tests/SignInForm.test.js:46:189)
    at Object.asyncFn (/projects/challenge/node_modules/jest-jasmine2/build/jasmine-async.js:68:30)
    at resolve (/projects/challenge/node_modules/jest-jasmine2/build/queueRunner.js:38:12)
    at new Promise (&lt;anonymous&gt;)
    at mapper (/projects/challenge/node_modules/jest-jasmine2/build/queueRunner.js:31:21)
    at Promise.resolve.then.el (/projects/challenge/node_modules/p-map/index.js:46:16)
    at &lt;anonymous&gt;" type="AssertionError">
      </failure>
    </testcase>
    <testcase classname="SignInForm" name="should change the state of the Login Component" time="0">
      <failure message="Error: Method “simulate” is meant to be run on 1 node. 0 found instead.
    at ShallowWrapper.single (/projects/challenge/node_modules/enzyme/build/ShallowWrapper.js:2183:17)
    at ShallowWrapper.simulate (/projects/challenge/node_modules/enzyme/build/ShallowWrapper.js:1360:21)
    at Object.it (/projects/challenge/src/tests/SignInForm.test.js:49:28)
    at Object.asyncFn (/projects/challenge/node_modules/jest-jasmine2/build/jasmine-async.js:68:30)
    at resolve (/projects/challenge/node_modules/jest-jasmine2/build/queueRunner.js:38:12)
    at new Promise (&lt;anonymous&gt;)
    at mapper (/projects/challenge/node_modules/jest-jasmine2/build/queueRunner.js:31:21)
    at Promise.resolve.then.el (/projects/challenge/node_modules/p-map/index.js:46:16)
    at &lt;anonymous&gt;" type="AssertionError">
      </failure>
    </testcase>
    <testcase classname="SignInForm" name="should change the state of the Login Component" time="0">
      <failure message="Error: Method “simulate” is meant to be run on 1 node. 0 found instead.
    at ShallowWrapper.single (/projects/challenge/node_modules/enzyme/build/ShallowWrapper.js:2183:17)
    at ShallowWrapper.simulate (/projects/challenge/node_modules/enzyme/build/ShallowWrapper.js:1360:21)
    at Object.it (/projects/challenge/src/tests/SignInForm.test.js:54:31)
    at Object.asyncFn (/projects/challenge/node_modules/jest-jasmine2/build/jasmine-async.js:68:30)
    at resolve (/projects/challenge/node_modules/jest-jasmine2/build/queueRunner.js:38:12)
    at new Promise (&lt;anonymous&gt;)
    at mapper (/projects/challenge/node_modules/jest-jasmine2/build/queueRunner.js:31:21)
    at Promise.resolve.then.el (/projects/challenge/node_modules/p-map/index.js:46:16)
    at &lt;anonymous&gt;" type="AssertionError">
      </failure>
    </testcase>
    <system-out/>
    <system-err/>
  </testsuite>
  <testsuite id="2" name="/projects/challenge/src/tests/home2.test.js" errors="0" package="/projects/challenge/src/tests/home2.test.js" hostname="localhost" tests="1" failures="0" time="0.333" timestamp="2020-07-12T18:34:19">
    <properties>
    </properties>
    <testcase classname="testing Home component" name="checking home content" time="0">
    </testcase>
    <system-out/>
    <system-err/>
  </testsuite>
  <testsuite id="3" name="/projects/challenge/src/tests/NavBar.test.js" errors="0" package="/projects/challenge/src/tests/NavBar.test.js" hostname="localhost" tests="1" failures="1" time="0.325" timestamp="2020-07-12T18:34:19">
    <properties>
    </properties>
    <testcase classname="testing NavBar component" name="checking the NavBar NavLink router content" time="0">
      <failure message="Error: Method “props” is meant to be run on 1 node. 0 found instead.
    at ShallowWrapper.single (/projects/challenge/node_modules/enzyme/build/ShallowWrapper.js:2183:17)
    at ShallowWrapper.props (/projects/challenge/node_modules/enzyme/build/ShallowWrapper.js:1420:21)
    at Object.test (/projects/challenge/src/tests/NavBar.test.js:22:19)
    at Object.asyncFn (/projects/challenge/node_modules/jest-jasmine2/build/jasmine-async.js:68:30)
    at resolve (/projects/challenge/node_modules/jest-jasmine2/build/queueRunner.js:38:12)
    at new Promise (&lt;anonymous&gt;)
    at mapper (/projects/challenge/node_modules/jest-jasmine2/build/queueRunner.js:31:21)
    at Promise.resolve.then.el (/projects/challenge/node_modules/p-map/index.js:46:16)
    at &lt;anonymous&gt;" type="AssertionError">
      </failure>
    </testcase>
    <system-out/>
    <system-err/>
  </testsuite>
  <testsuite id="4" name="/projects/challenge/src/tests/MainArea.test.js" errors="0" package="/projects/challenge/src/tests/MainArea.test.js" hostname="localhost" tests="1" failures="0" time="0.317" timestamp="2020-07-12T18:34:19">
    <properties>
    </properties>
    <testcase classname="testing  MainArea" name="checking MainArea content" time="0">
    </testcase>
    <system-out/>
    <system-err/>
  </testsuite>
  <testsuite id="5" name="/projects/challenge/src/tests/Checkout.test.js" errors="0" package="/projects/challenge/src/tests/Checkout.test.js" hostname="localhost" tests="1" failures="1" time="0.278" timestamp="2020-07-12T18:34:20">
    <properties>
    </properties>
    <testcase classname="testing Checkout component" name="checking Checkout content" time="0">
      <failure message="TypeError: Cannot read property &apos;image&apos; of undefined
    at Checkout.render (/projects/challenge/src/pages/Checkout.jsx:32:112)
    at ReactShallowRenderer._mountClassComponent (/projects/challenge/node_modules/react-test-renderer/cjs/react-test-renderer-shallow.development.js:809:37)
    at ReactShallowRenderer.render (/projects/challenge/node_modules/react-test-renderer/cjs/react-test-renderer-shallow.development.js:738:14)
    at /projects/challenge/node_modules/enzyme-adapter-react-16/build/ReactSixteenAdapter.js:803:35
    at withSetStateAllowed (/projects/challenge/node_modules/enzyme-adapter-utils/build/Utils.js:153:16)
    at Object.render (/projects/challenge/node_modules/enzyme-adapter-react-16/build/ReactSixteenAdapter.js:802:68)
    at new ShallowWrapper (/projects/challenge/node_modules/enzyme/build/ShallowWrapper.js:414:22)
    at shallow (/projects/challenge/node_modules/enzyme/build/shallow.js:21:10)
    at Object.test (/projects/challenge/src/tests/Checkout.test.js:14:41)
    at Object.asyncFn (/projects/challenge/node_modules/jest-jasmine2/build/jasmine-async.js:68:30)
    at resolve (/projects/challenge/node_modules/jest-jasmine2/build/queueRunner.js:38:12)
    at new Promise (&lt;anonymous&gt;)
    at mapper (/projects/challenge/node_modules/jest-jasmine2/build/queueRunner.js:31:21)
    at Promise.resolve.then.el (/projects/challenge/node_modules/p-map/index.js:46:16)
    at &lt;anonymous&gt;" type="AssertionError">
      </failure>
    </testcase>
    <system-out/>
    <system-err/>
  </testsuite>
  <testsuite id="6" name="/projects/challenge/src/App.test.js" errors="0" package="/projects/challenge/src/App.test.js" hostname="localhost" tests="1" failures="0" time="0.181" timestamp="2020-07-12T18:34:20">
    <properties>
    </properties>
    <testcase classname="renders without crashing" name="renders without crashing" time="0">
    </testcase>
    <system-out/>
    <system-err/>
  </testsuite>
</testsuites>